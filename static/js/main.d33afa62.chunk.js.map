{"version":3,"sources":["App.js","utility.js","reportWebVitals.js","index.js"],"names":["App","props","dragStart","ev","type","redrag","elementId","dataTransfer","setData","dragOver","preventDefault","drop","getData","elementData","state","nextElementId","newElementData","left","clientX","top","clientY","parseInt","clearData","setState","dropOutside","this","elements","dragStartHandler","Object","keys","forEach","key","push","className","style","position","zIndex","draggable","onDragStart","getElementList","onDrop","onDragOver","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d33afa62.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { getElementList } from './utility';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nextElementId: 0,\n      elementData: {},\n      redrag: false,\n    };\n  }\n\n  dragStart = (ev, type, redrag=false, elementId=null) => {\n    ev.dataTransfer.setData(\"type\", type);\n    if (redrag) {\n      ev.dataTransfer.setData(\"elementId\", elementId);\n    }\n  }\n  \n  dragOver = (ev) => {\n    ev.preventDefault();\n  }\n  \n  drop = (ev) => {\n    ev.preventDefault();\n    const type = ev.dataTransfer.getData(\"type\");\n    const { elementData } = this.state;\n    let { nextElementId } = this.state;\n    const newElementData = {\n      type,\n      left: ev.clientX,\n      top: ev.clientY,\n    }\n\n    let elementId = ev.dataTransfer.getData(\"elementId\");\n    if (elementId) {                                    // check if element is redragged and the ID exists in dataTransfer\n      elementId = parseInt(elementId);\n      elementData[elementId] = {\n        ...elementData[elementId],\n        left: ev.clientX,\n        top: ev.clientY,\n      }\n      parseInt(ev.dataTransfer.getData(\"elementId\"))\n    } else {\n      elementData[nextElementId] = newElementData;\n      nextElementId = nextElementId + 1;\n    }\n\n    ev.dataTransfer.clearData();\n\n    this.setState({\n      elementData,\n      nextElementId,\n    });\n  }\n\n  dropOutside = (ev) => {\n    const { elementData } = this.state;\n    let elementId = ev.dataTransfer.getData(\"elementId\");\n    if (elementId && elementData[elementId]) {\n      delete elementData[elementId];\n    }\n\n    ev.dataTransfer.clearData();\n\n    this.setState({\n      elementData,\n    });\n  }\n\n  render() { \n\n    const { elementData } = this.state;\n    const elements = [ ...getElementList(elementData, this.dragStart) ];\n\n    return (\n      <div className=\"App\">\n        <div className=\"components-list\" onDrop={this.dropOutside} onDragOver={this.dragOver}>\n          <div className=\"component blue\" draggable={true} onDragStart={(ev) => { this.dragStart(ev, 'blue') }}>\n            Blue Component\n          </div>\n          <div className=\"component green\" draggable={true} onDragStart={(ev) => { this.dragStart(ev, 'green') }}>\n            Green Component\n          </div>\n          <div className=\"component purple\" draggable={true} onDragStart={(ev) => { this.dragStart(ev, 'purple') }}>\n            Purple Component\n          </div>\n        </div>\n        <div className=\"drop-area\" onDrop={this.drop} onDragOver={this.dragOver}>\n          Drop Area\n          { elements }\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","const getElementList = (elementData, dragStartHandler) => {\r\n  const elements = [];\r\n\r\n  Object.keys(elementData).forEach(key => {\r\n    let { type, left, top } = elementData[key];\r\n\r\n    switch (type) {\r\n      case 'blue':\r\n        elements.push(\r\n          <div\r\n            className=\"component blue\"\r\n            key={key}\r\n            style={{\r\n              position: 'absolute',\r\n              left: left + 'px',\r\n              top: top + 'px',\r\n              zIndex: 100,\r\n            }}\r\n            draggable={true}\r\n            onDragStart={(ev) => { dragStartHandler(ev, type, true, key); }}\r\n          >\r\n            Blue Component\r\n        </div>\r\n        );\r\n        break;\r\n\r\n      case 'green':\r\n        elements.push(\r\n          <div\r\n            className=\"component green\"\r\n            key={key}\r\n            style={{\r\n              position: 'absolute',\r\n              left: left + 'px',\r\n              top: top + 'px',\r\n            }}\r\n            draggable={true}\r\n            onDragStart={(ev) => { dragStartHandler(ev, type, true, key); }}\r\n          >\r\n            Green Component\r\n        </div>\r\n        );\r\n        break;\r\n\r\n      case 'purple':\r\n        elements.push(\r\n          <div\r\n            className=\"component purple\"\r\n            key={key}\r\n            style={{\r\n              position: 'absolute',\r\n              left: left + 'px',\r\n              top: top + 'px',\r\n            }}\r\n            draggable={true}\r\n            onDragStart={(ev) => { dragStartHandler(ev, type, true, key); }}\r\n          >\r\n            Purple Component\r\n        </div>\r\n        );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  return elements;\r\n}\r\n\r\nexport { getElementList };","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}